# AndeChain Smart Contracts Makefile
# Provides convenient commands for development, testing, and deployment

.PHONY: help build test coverage clean deploy deploy-andeswap deploy-factory lint security format docs

# Default target
help:
	@echo "AndeChain Smart Contracts Development Commands:"
	@echo ""
	@echo "üî® Build & Compile:"
	@echo "  build          - Compile all contracts"
	@echo "  clean          - Clean build artifacts"
	@echo ""
	@echo "üß™ Testing:"
	@echo "  test           - Run all tests"
	@echo "  test-dex       - Run DEX-specific tests"
	@echo "  test-factory   - Run Token Factory tests"
	@echo "  test-integration - Run integration tests"
	@echo "  coverage       - Generate test coverage report"
	@echo "  gas-report     - Generate gas usage report"
	@echo ""
	@echo "üöÄ Deployment:"
	@echo "  deploy-local   - Deploy to local network"
	@echo "  deploy-andeswap - Deploy AndeSwap DEX"
	@echo "  deploy-factory - Deploy Token Factory"
	@echo "  deploy-all     - Deploy all contracts"
	@echo ""
	@echo "üîç Analysis & Security:"
	@echo "  lint           - Run linter"
	@echo "  security       - Run Slither security analysis"
	@echo "  verify         - Verify contracts on Etherscan"
	@echo ""
	@echo "üìù Documentation:"
	@echo "  docs           - Generate documentation"
	@echo "  docs-serve     - Serve documentation locally"
	@echo ""
	@echo "üîß Development:"
	@echo "  format         - Format code"
	@echo "  snapshot       - Update gas snapshots"
	@echo "  anvil          - Start local Anvil node"

# Build & Compile
build:
	@echo "üî® Building contracts..."
	forge build
	@echo "‚úÖ Build complete"

clean:
	@echo "üßπ Cleaning artifacts..."
	forge clean
	rm -rf out/
	rm -rf cache/
	@echo "‚úÖ Clean complete"

# Testing
test:
	@echo "üß™ Running all tests..."
	forge test -vv
	@echo "‚úÖ All tests complete"

test-dex:
	@echo "üß™ Running DEX tests..."
	forge test --match-path test/dex/* -vvv
	@echo "‚úÖ DEX tests complete"

test-factory:
	@echo "üß™ Running Token Factory tests..."
	forge test --match-path test/factory/* -vvv
	@echo "‚úÖ Token Factory tests complete"

test-integration:
	@echo "üß™ Running integration tests..."
	forge test --match-path test/integration/* -vvv
	@echo "‚úÖ Integration tests complete"

test-fuzz:
	@echo "üß™ Running fuzz tests..."
	forge test --fuzz-runs 1000 -vv
	@echo "‚úÖ Fuzz tests complete"

coverage:
	@echo "üìä Generating coverage report..."
	forge coverage --report lcov
	@echo "‚úÖ Coverage report generated in coverage/"
	@echo "View with: genhtml coverage/lcov.info -o coverage/"

gas-report:
	@echo "‚õΩ Generating gas report..."
	forge test --gas-report
	@echo "‚úÖ Gas report complete"

# Deployment
deploy-local:
	@echo "üöÄ Deploying to local network..."
	forge script script/dex/DeployAndeSwap.s.sol:DeployAndeSwapTestnet --rpc-url local --broadcast --legacy
	forge script script/factory/DeployTokenFactory.s.sol:DeployTokenFactoryTestnet --rpc-url local --broadcast --legacy
	@echo "‚úÖ Local deployment complete"

deploy-andeswap:
	@echo "üöÄ Deploying AndeSwap DEX..."
	forge script script/dex/DeployAndeSwap.s.sol --rpc-url $(RPC_URL) --broadcast --legacy --verify
	@echo "‚úÖ AndeSwap deployment complete"

deploy-factory:
	@echo "üöÄ Deploying Token Factory..."
	forge script script/factory/DeployTokenFactory.s.sol --rpc-url $(RPC_URL) --broadcast --legacy --verify
	@echo "‚úÖ Token Factory deployment complete"

deploy-all:
	@echo "üöÄ Deploying all contracts..."
	$(MAKE) deploy-andeswap
	$(MAKE) deploy-factory
	@echo "‚úÖ All contracts deployed"

deploy-testnet:
	@echo "üöÄ Deploying to testnet..."
	forge script script/dex/DeployAndeSwap.s.sol:DeployAndeSwapTestnet --rpc-url $(TESTNET_RPC_URL) --broadcast --legacy --verify
	forge script script/factory/DeployTokenFactory.s.sol:DeployTokenFactoryTestnet --rpc-url $(TESTNET_RPC_URL) --broadcast --legacy --verify
	@echo "‚úÖ Testnet deployment complete"

deploy-mainnet:
	@echo "üöÄ Deploying to mainnet..."
	@echo "‚ö†Ô∏è  WARNING: This will deploy to mainnet!"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ]
	forge script script/dex/DeployAndeSwap.s.sol:DeployAndeSwapMainnet --rpc-url $(MAINNET_RPC_URL) --broadcast --legacy --verify
	forge script script/factory/DeployTokenFactory.s.sol:DeployTokenFactoryMainnet --rpc-url $(MAINNET_RPC_URL) --broadcast --legacy --verify
	@echo "‚úÖ Mainnet deployment complete"

# Analysis & Security
lint:
	@echo "üîç Running linter..."
	forge fmt --check
	@echo "‚úÖ Lint complete"

format:
	@echo "üìù Formatting code..."
	forge fmt
	@echo "‚úÖ Code formatted"

security:
	@echo "üîí Running security analysis..."
	slither src/ --filter-paths "test/" --filter naming-convention,external-function,low-level-calls
	@echo "‚úÖ Security analysis complete"

security-full:
	@echo "üîí Running full security analysis..."
	slither src/ --filter-paths "test/"
	@echo "‚úÖ Full security analysis complete"

verify:
	@echo "üîç Verifying contracts..."
	@echo "Usage: make verify CONTRACT_ADDRESS=0x... RPC_URL=..."
	forge verify-contract $(CONTRACT_ADDRESS) "src/dex/AndeSwapPair.sol:AndeSwapPair" --chain-id $(CHAIN_ID) --verifier-url $(VERIFIER_URL) --etherscan-api-key $(ETHERSCAN_API_KEY)

# Documentation
docs:
	@echo "üìö Generating documentation..."
	@mkdir -p docs/generated
	@echo "# AndeChain Smart Contracts Documentation" > docs/generated/README.md
	@echo "" >> docs/generated/README.md
	@echo "## Contract Overview" >> docs/generated/README.md
	@echo "" >> docs/generated/README.md
	@for file in src/**/*.sol; do \
		echo "### $$file" >> docs/generated/README.md; \
		echo "" >> docs/generated/README.md; \
		grep -E "///|contract|interface" $$file | head -20 >> docs/generated/README.md; \
		echo "" >> docs/generated/README.md; \
	done
	@echo "‚úÖ Documentation generated in docs/generated/"

docs-serve:
	@echo "üåê Serving documentation..."
	@echo "Open http://localhost:8000 to view docs"
	cd docs/generated && python3 -m http.server 8000

# Development
snapshot:
	@echo "üì∏ Updating gas snapshots..."
	forge snapshot
	@echo "‚úÖ Gas snapshots updated"

anvil:
	@echo "üîß Starting local Anvil node..."
	anvil --fork-url $(FORK_URL) --fork-block-number $(FORK_BLOCK) --accounts 10 --balance 1000

# Gas Optimization
gas-optimize:
	@echo "‚ö° Running gas optimization analysis..."
	forge test --gas-report --match-test test*
	@echo "‚úÖ Gas optimization analysis complete"

# Size Analysis
size-analysis:
	@echo "üìè Analyzing contract sizes..."
	@for file in out/**/*.sol/*.json; do \
		if [ -f "$$file" ]; then \
			contract=$$(basename "$$file" .json); \
			size=$$(jq -r '.bytecode.object' "$$file" | wc -c); \
			echo "$$contract: $$size bytes"; \
		fi; \
	done

# Integration with AndeChain Infrastructure
start-infra:
	@echo "üöÄ Starting AndeChain infrastructure..."
	cd .. && make start
	@echo "‚úÖ Infrastructure started"

stop-infra:
	@echo "üõë Stopping AndeChain infrastructure..."
	cd .. && make stop
	@echo "‚úÖ Infrastructure stopped"

# CI/CD Helpers
ci-test:
	@echo "üß™ Running CI tests..."
	forge test --gas-report --no-match-test testFuzz
	@echo "‚úÖ CI tests complete"

ci-build:
	@echo "üî® Running CI build..."
	forge build
	forge fmt --check
	@echo "‚úÖ CI build complete"

ci-security:
	@echo "üîí Running CI security checks..."
	slither src/ --filter-paths "test/" --filter naming-convention --json slither-ci.json
	@echo "‚úÖ CI security checks complete"

# Development Utilities
install:
	@echo "üì¶ Installing dependencies..."
	forge install foundry-rs/forge-std --no-commit
	forge install OpenZeppelin/openzeppelin-contracts --no-commit
	forge install OpenZeppelin/openzeppelin-contracts-upgradeable --no-commit
	@echo "‚úÖ Dependencies installed"

update:
	@echo "üîÑ Updating dependencies..."
	forge update
	@echo "‚úÖ Dependencies updated"

# Quick Development Commands
dev-test: build test
	@echo "üöÄ Quick dev test complete"

dev-deploy: build deploy-local
	@echo "üöÄ Quick dev deployment complete"

dev-all: clean build test coverage
	@echo "üöÄ Full dev cycle complete"

# Production Commands
prod-check: clean build test security lint
	@echo "‚úÖ Production checks complete"

prod-deploy: prod-check deploy-all
	@echo "‚úÖ Production deployment complete"

# Monitoring
monitor-gas:
	@echo "‚õΩ Monitoring gas usage..."
	watch -n 5 'make gas-report | tail -20'

monitor-tests:
	@echo "üß™ Monitoring test results..."
	watch -n 10 'forge test --no-match-test testFuzz --gas-report | tail -30'

# Help for specific areas
help-dex:
	@echo "AndeSwap DEX Commands:"
	@echo "  test-dex       - Run DEX tests"
	@echo "  deploy-andeswap - Deploy AndeSwap"
	@echo "  docs-dex       - Generate DEX documentation"

help-factory:
	@echo "Token Factory Commands:"
	@echo "  test-factory   - Run Token Factory tests"
	@echo "  deploy-factory - Deploy Token Factory"
	@echo "  docs-factory   - Generate Factory documentation"

# Environment Setup
setup-local:
	@echo "üîß Setting up local environment..."
	@if [ ! -f .env ]; then echo "RPC_URL=http://localhost:8545" > .env; fi
	@if [ ! -d lib ]; then make install; fi
	@echo "‚úÖ Local environment setup complete"

setup-testnet:
	@echo "üîß Setting up testnet environment..."
	@echo "Please configure your .env file with TESTNET_RPC_URL and ETHERSCAN_API_KEY"
	@echo "Example:"
	@echo "TESTNET_RPC_URL=https://sepolia.infura.io/v3/YOUR_PROJECT_ID"
	@echo "ETHERSCAN_API_KEY=YOUR_ETHERSCAN_API_KEY"
	@echo "CHAIN_ID=11155111"
	@echo "VERIFIER_URL=https://api-sepolia.etherscan.io/api"

# Advanced Commands
profile-gas:
	@echo "‚ö° Profiling gas usage..."
	forge test --gas-report --match-profile gas
	@echo "‚úÖ Gas profiling complete"

debug-contract:
	@echo "üêõ Debugging contract..."
	@echo "Usage: make debug-contract CONTRACT=ContractName TEST=testFunction"
	forge test --match-contract $(CONTRACT) --match-test $(TEST) -vvvv

# Batch Operations
batch-test:
	@echo "üß™ Running batch tests..."
	forge test --no-match-test testFuzz --gas-report
	forge test --match-test testFuzz --fuzz-runs 100
	@echo "‚úÖ Batch testing complete"

batch-deploy:
	@echo "üöÄ Running batch deployments..."
	forge script script/dex/DeployAndeSwap.s.sol --rpc-url $(RPC_URL) --broadcast --legacy --skip-simulation
	forge script script/factory/DeployTokenFactory.s.sol --rpc-url $(RPC_URL) --broadcast --legacy --skip-simulation
	@echo "‚úÖ Batch deployment complete"

# Default environment variables
RPC_URL ?= http://localhost:8545
TESTNET_RPC_URL ?= https://sepolia.infura.io/v3/YOUR_PROJECT_ID
MAINNET_RPC_URL ?= https://mainnet.infura.io/v3/YOUR_PROJECT_ID
CHAIN_ID ?= 31337
VERIFIER_URL ?= http://localhost:4000/api
ETHERSCAN_API_KEY ?= dummy-key
FORK_URL ?= https://eth-mainnet.alchemyapi.io/v2/YOUR_API_KEY
FORK_BLOCK ?= latest

# Include local overrides
-include .env