/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustedRelayerOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_ACTIONS_PER_HOUR"
      | "MAX_PRICE_AGE"
      | "MIN_DELAY"
      | "MIN_RELAYERS"
      | "RELAYER_ROLE"
      | "actionCount"
      | "addRelayer"
      | "getAggregatedPrice"
      | "getPairId"
      | "getPrice"
      | "getPriceWithMetadata"
      | "getRoleAdmin"
      | "getSystemHealth"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "lastActionTimestamp"
      | "pause"
      | "paused"
      | "prices"
      | "relayerPrices"
      | "relayers"
      | "removeRelayer"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "totalRelayers"
      | "totalUpdates"
      | "unpause"
      | "updatePrice"
      | "updatePricesBatch"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "Paused"
      | "PriceDeviation"
      | "PriceUpdated"
      | "RelayerAdded"
      | "RelayerPaused"
      | "RelayerRemoved"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ACTIONS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_AGE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_RELAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actionCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregatedPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairId",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPriceWithMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastActionTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "prices", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "relayerPrices",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRelayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUpdates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePricesBatch",
    values: [BytesLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ACTIONS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_AGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_RELAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAggregatedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPairId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastActionTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePricesBatch",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDeviationEvent {
  export type InputTuple = [
    pairId: BytesLike,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    deviation: BigNumberish
  ];
  export type OutputTuple = [
    pairId: string,
    oldPrice: bigint,
    newPrice: bigint,
    deviation: bigint
  ];
  export interface OutputObject {
    pairId: string;
    oldPrice: bigint;
    newPrice: bigint;
    deviation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    pairId: BytesLike,
    price: BigNumberish,
    timestamp: BigNumberish,
    relayer: AddressLike
  ];
  export type OutputTuple = [
    pairId: string,
    price: bigint,
    timestamp: bigint,
    relayer: string
  ];
  export interface OutputObject {
    pairId: string;
    price: bigint;
    timestamp: bigint;
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerAddedEvent {
  export type InputTuple = [relayer: AddressLike, endpoint: string];
  export type OutputTuple = [relayer: string, endpoint: string];
  export interface OutputObject {
    relayer: string;
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerPausedEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerRemovedEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustedRelayerOracle extends BaseContract {
  connect(runner?: ContractRunner | null): TrustedRelayerOracle;
  waitForDeployment(): Promise<this>;

  interface: TrustedRelayerOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_ACTIONS_PER_HOUR: TypedContractMethod<[], [bigint], "view">;

  MAX_PRICE_AGE: TypedContractMethod<[], [bigint], "view">;

  MIN_DELAY: TypedContractMethod<[], [bigint], "view">;

  MIN_RELAYERS: TypedContractMethod<[], [bigint], "view">;

  RELAYER_ROLE: TypedContractMethod<[], [string], "view">;

  actionCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  addRelayer: TypedContractMethod<
    [relayer: AddressLike, endpoint: string],
    [void],
    "nonpayable"
  >;

  getAggregatedPrice: TypedContractMethod<
    [pairId: BytesLike],
    [[bigint, bigint] & { price: bigint; confidence: bigint }],
    "view"
  >;

  getPairId: TypedContractMethod<
    [base: string, quote: string],
    [string],
    "view"
  >;

  getPrice: TypedContractMethod<[pairId: BytesLike], [bigint], "view">;

  getPriceWithMetadata: TypedContractMethod<
    [pairId: BytesLike],
    [
      [bigint, bigint, boolean, string] & {
        price: bigint;
        timestamp: bigint;
        isStale: boolean;
        source: string;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSystemHealth: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isHealthy: boolean;
        activeRelayers: bigint;
        stalePairs: bigint;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  lastActionTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  prices: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, string, bigint] & {
        price: bigint;
        timestamp: bigint;
        blockNumber: bigint;
        relayer: string;
        updateCount: bigint;
      }
    ],
    "view"
  >;

  relayerPrices: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  relayers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string] & {
        isActive: boolean;
        totalUpdates: bigint;
        lastUpdate: bigint;
        endpoint: string;
      }
    ],
    "view"
  >;

  removeRelayer: TypedContractMethod<
    [relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalRelayers: TypedContractMethod<[], [bigint], "view">;

  totalUpdates: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePrice: TypedContractMethod<
    [pairId: BytesLike, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePricesBatch: TypedContractMethod<
    [pairIds: BytesLike[], newPrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_ACTIONS_PER_HOUR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PRICE_AGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_RELAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAYER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "actionCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "addRelayer"
  ): TypedContractMethod<
    [relayer: AddressLike, endpoint: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAggregatedPrice"
  ): TypedContractMethod<
    [pairId: BytesLike],
    [[bigint, bigint] & { price: bigint; confidence: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairId"
  ): TypedContractMethod<[base: string, quote: string], [string], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[pairId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceWithMetadata"
  ): TypedContractMethod<
    [pairId: BytesLike],
    [
      [bigint, bigint, boolean, string] & {
        price: bigint;
        timestamp: bigint;
        isStale: boolean;
        source: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSystemHealth"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isHealthy: boolean;
        activeRelayers: bigint;
        stalePairs: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastActionTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "prices"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, string, bigint] & {
        price: bigint;
        timestamp: bigint;
        blockNumber: bigint;
        relayer: string;
        updateCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "relayerPrices"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "relayers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string] & {
        isActive: boolean;
        totalUpdates: bigint;
        lastUpdate: bigint;
        endpoint: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeRelayer"
  ): TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalRelayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUpdates"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [pairId: BytesLike, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePricesBatch"
  ): TypedContractMethod<
    [pairIds: BytesLike[], newPrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceDeviation"
  ): TypedContractEvent<
    PriceDeviationEvent.InputTuple,
    PriceDeviationEvent.OutputTuple,
    PriceDeviationEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerAdded"
  ): TypedContractEvent<
    RelayerAddedEvent.InputTuple,
    RelayerAddedEvent.OutputTuple,
    RelayerAddedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerPaused"
  ): TypedContractEvent<
    RelayerPausedEvent.InputTuple,
    RelayerPausedEvent.OutputTuple,
    RelayerPausedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerRemoved"
  ): TypedContractEvent<
    RelayerRemovedEvent.InputTuple,
    RelayerRemovedEvent.OutputTuple,
    RelayerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceDeviation(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      PriceDeviationEvent.InputTuple,
      PriceDeviationEvent.OutputTuple,
      PriceDeviationEvent.OutputObject
    >;
    PriceDeviation: TypedContractEvent<
      PriceDeviationEvent.InputTuple,
      PriceDeviationEvent.OutputTuple,
      PriceDeviationEvent.OutputObject
    >;

    "PriceUpdated(bytes32,uint256,uint256,address)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "RelayerAdded(address,string)": TypedContractEvent<
      RelayerAddedEvent.InputTuple,
      RelayerAddedEvent.OutputTuple,
      RelayerAddedEvent.OutputObject
    >;
    RelayerAdded: TypedContractEvent<
      RelayerAddedEvent.InputTuple,
      RelayerAddedEvent.OutputTuple,
      RelayerAddedEvent.OutputObject
    >;

    "RelayerPaused(address)": TypedContractEvent<
      RelayerPausedEvent.InputTuple,
      RelayerPausedEvent.OutputTuple,
      RelayerPausedEvent.OutputObject
    >;
    RelayerPaused: TypedContractEvent<
      RelayerPausedEvent.InputTuple,
      RelayerPausedEvent.OutputTuple,
      RelayerPausedEvent.OutputObject
    >;

    "RelayerRemoved(address)": TypedContractEvent<
      RelayerRemovedEvent.InputTuple,
      RelayerRemovedEvent.OutputTuple,
      RelayerRemovedEvent.OutputObject
    >;
    RelayerRemoved: TypedContractEvent<
      RelayerRemovedEvent.InputTuple,
      RelayerRemovedEvent.OutputTuple,
      RelayerRemovedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
