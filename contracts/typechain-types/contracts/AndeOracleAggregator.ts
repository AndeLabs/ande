/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AndeOracleAggregatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CACHE_DURATION"
      | "MAX_DEVIATION"
      | "MIN_SOURCES"
      | "addSource"
      | "deactivateSource"
      | "getPrice"
      | "getPriceWithConfidence"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "sources"
      | "transferOwnership"
      | "updateCache"
      | "updateSourceWeight",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OutlierDetected"
      | "OwnershipTransferred"
      | "PriceAggregated"
      | "SourceAdded"
      | "SourceRemoved"
      | "SourceUpdated",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CACHE_DURATION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DEVIATION",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SOURCES",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "addSource",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateSource",
    values: [BytesLike, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPriceWithConfidence",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "sources",
    values: [BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "updateCache",
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "updateSourceWeight",
    values: [BytesLike, AddressLike, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: "CACHE_DURATION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DEVIATION",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SOURCES",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "addSource", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateSource",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceWithConfidence",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "sources", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCache",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSourceWeight",
    data: BytesLike,
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutlierDetectedEvent {
  export type InputTuple = [
    pairId: BytesLike,
    oracle: AddressLike,
    price: BigNumberish,
    medianPrice: BigNumberish,
    deviation: BigNumberish,
  ];
  export type OutputTuple = [
    pairId: string,
    oracle: string,
    price: bigint,
    medianPrice: bigint,
    deviation: bigint,
  ];
  export interface OutputObject {
    pairId: string;
    oracle: string;
    price: bigint;
    medianPrice: bigint;
    deviation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceAggregatedEvent {
  export type InputTuple = [
    pairId: BytesLike,
    price: BigNumberish,
    confidence: BigNumberish,
    sourcesUsed: BigNumberish,
  ];
  export type OutputTuple = [
    pairId: string,
    price: bigint,
    confidence: bigint,
    sourcesUsed: bigint,
  ];
  export interface OutputObject {
    pairId: string;
    price: bigint;
    confidence: bigint;
    sourcesUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SourceAddedEvent {
  export type InputTuple = [
    pairId: BytesLike,
    oracle: AddressLike,
    weight: BigNumberish,
    name: string,
  ];
  export type OutputTuple = [
    pairId: string,
    oracle: string,
    weight: bigint,
    name: string,
  ];
  export interface OutputObject {
    pairId: string;
    oracle: string;
    weight: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SourceRemovedEvent {
  export type InputTuple = [pairId: BytesLike, oracle: AddressLike];
  export type OutputTuple = [pairId: string, oracle: string];
  export interface OutputObject {
    pairId: string;
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SourceUpdatedEvent {
  export type InputTuple = [
    pairId: BytesLike,
    oracle: AddressLike,
    newWeight: BigNumberish,
  ];
  export type OutputTuple = [pairId: string, oracle: string, newWeight: bigint];
  export interface OutputObject {
    pairId: string;
    oracle: string;
    newWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AndeOracleAggregator extends BaseContract {
  connect(runner?: ContractRunner | null): AndeOracleAggregator;
  waitForDeployment(): Promise<this>;

  interface: AndeOracleAggregatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  CACHE_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_DEVIATION: TypedContractMethod<[], [bigint], "view">;

  MIN_SOURCES: TypedContractMethod<[], [bigint], "view">;

  addSource: TypedContractMethod<
    [
      pairId: BytesLike,
      oracle: AddressLike,
      weight: BigNumberish,
      priority: BigNumberish,
      name: string,
    ],
    [void],
    "nonpayable"
  >;

  deactivateSource: TypedContractMethod<
    [pairId: BytesLike, oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getPrice: TypedContractMethod<[pairId: BytesLike], [bigint], "view">;

  getPriceWithConfidence: TypedContractMethod<
    [pairId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        price: bigint;
        confidence: bigint;
        sourcesUsed: bigint;
      },
    ],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sources: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, boolean, bigint, string] & {
        oracle: string;
        weight: bigint;
        isActive: boolean;
        priority: bigint;
        name: string;
      },
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCache: TypedContractMethod<[pairId: BytesLike], [void], "nonpayable">;

  updateSourceWeight: TypedContractMethod<
    [pairId: BytesLike, oracle: AddressLike, newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "CACHE_DURATION",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DEVIATION",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SOURCES",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addSource",
  ): TypedContractMethod<
    [
      pairId: BytesLike,
      oracle: AddressLike,
      weight: BigNumberish,
      priority: BigNumberish,
      name: string,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateSource",
  ): TypedContractMethod<
    [pairId: BytesLike, oracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPrice",
  ): TypedContractMethod<[pairId: BytesLike], [bigint], "view">;
  getFunction(nameOrSignature: "getPriceWithConfidence"): TypedContractMethod<
    [pairId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        price: bigint;
        confidence: bigint;
        sourcesUsed: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "sources"): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, boolean, bigint, string] & {
        oracle: string;
        weight: bigint;
        isActive: boolean;
        priority: bigint;
        name: string;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCache",
  ): TypedContractMethod<[pairId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSourceWeight",
  ): TypedContractMethod<
    [pairId: BytesLike, oracle: AddressLike, newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OutlierDetected",
  ): TypedContractEvent<
    OutlierDetectedEvent.InputTuple,
    OutlierDetectedEvent.OutputTuple,
    OutlierDetectedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceAggregated",
  ): TypedContractEvent<
    PriceAggregatedEvent.InputTuple,
    PriceAggregatedEvent.OutputTuple,
    PriceAggregatedEvent.OutputObject
  >;
  getEvent(
    key: "SourceAdded",
  ): TypedContractEvent<
    SourceAddedEvent.InputTuple,
    SourceAddedEvent.OutputTuple,
    SourceAddedEvent.OutputObject
  >;
  getEvent(
    key: "SourceRemoved",
  ): TypedContractEvent<
    SourceRemovedEvent.InputTuple,
    SourceRemovedEvent.OutputTuple,
    SourceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SourceUpdated",
  ): TypedContractEvent<
    SourceUpdatedEvent.InputTuple,
    SourceUpdatedEvent.OutputTuple,
    SourceUpdatedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OutlierDetected(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      OutlierDetectedEvent.InputTuple,
      OutlierDetectedEvent.OutputTuple,
      OutlierDetectedEvent.OutputObject
    >;
    OutlierDetected: TypedContractEvent<
      OutlierDetectedEvent.InputTuple,
      OutlierDetectedEvent.OutputTuple,
      OutlierDetectedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceAggregated(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      PriceAggregatedEvent.InputTuple,
      PriceAggregatedEvent.OutputTuple,
      PriceAggregatedEvent.OutputObject
    >;
    PriceAggregated: TypedContractEvent<
      PriceAggregatedEvent.InputTuple,
      PriceAggregatedEvent.OutputTuple,
      PriceAggregatedEvent.OutputObject
    >;

    "SourceAdded(bytes32,address,uint256,string)": TypedContractEvent<
      SourceAddedEvent.InputTuple,
      SourceAddedEvent.OutputTuple,
      SourceAddedEvent.OutputObject
    >;
    SourceAdded: TypedContractEvent<
      SourceAddedEvent.InputTuple,
      SourceAddedEvent.OutputTuple,
      SourceAddedEvent.OutputObject
    >;

    "SourceRemoved(bytes32,address)": TypedContractEvent<
      SourceRemovedEvent.InputTuple,
      SourceRemovedEvent.OutputTuple,
      SourceRemovedEvent.OutputObject
    >;
    SourceRemoved: TypedContractEvent<
      SourceRemovedEvent.InputTuple,
      SourceRemovedEvent.OutputTuple,
      SourceRemovedEvent.OutputObject
    >;

    "SourceUpdated(bytes32,address,uint256)": TypedContractEvent<
      SourceUpdatedEvent.InputTuple,
      SourceUpdatedEvent.OutputTuple,
      SourceUpdatedEvent.OutputObject
    >;
    SourceUpdated: TypedContractEvent<
      SourceUpdatedEvent.InputTuple,
      SourceUpdatedEvent.OutputTuple,
      SourceUpdatedEvent.OutputObject
    >;
  };
}
