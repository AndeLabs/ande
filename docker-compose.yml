# 🌐 ANDE Chain Production Ready - Sovereign EVM Rollup on Celestia DA
# Production Configuration - No development flags, optimized for prime-time
# Architecture: ev-reth (modified Reth) + Evolve Sequencer + Celestia Mocha-4
# Updated: 2025 - Production Testnet with Auto-Recovery & Security Hardening

networks:
  andechain-p2p:
    name: andechain-p2p
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  sequencer-data:
    driver: local
  evolve-data:
    driver: local
  celestia-data:
    driver: local
  jwttoken-sequencer:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

services:
  # ============================================
  # 1. Celestia Light Node (Data Availability Layer)
  # ============================================
  celestia-light:
    container_name: celestia-light
    image: ghcr.io/celestiaorg/celestia-node:v0.28.2-mocha
    restart: unless-stopped
    ports:
      - "2121:2121"   # Celestia P2P
      - "26658:26658" # Celestia RPC
    volumes:
      - celestia-data:/home/celestia
    command: ["sh", "-c", "celestia light init --p2p.network mocha-4 || true && celestia light start --core.ip rpc-mocha.pops.one --p2p.network mocha-4 --rpc.addr 0.0.0.0 --rpc.port 26658"]
    healthcheck:
      test: ["CMD", "sh", "-c", "netstat -tuln | grep -q ':26658'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - andechain-p2p

  # ============================================
  # 2. JWT Secrets Initialization (Production Security)
  # ============================================
  jwt-init-sequencer:
    container_name: jwt-init-sequencer
    image: alpine:3.22.0
    volumes:
      - jwttoken-sequencer:/jwt
    command: ["/bin/sh", "-c", "if [ ! -f /jwt/jwt.hex ]; then apk add --no-cache openssl && openssl rand -hex 32 | tr -d '\\n' > /jwt/jwt.hex && echo '✅ Production JWT generated for ANDE Chain sequencer'; else echo '✅ JWT exists for ANDE Chain sequencer'; fi"]
    networks:
      - andechain-p2p

  # ============================================
  # 3a. Init container to fix permissions
  # ============================================
  sequencer-init:
    container_name: sequencer-init
    image: alpine:3.22.0
    volumes:
      - sequencer-data:/data
    command: ["/bin/sh", "-c", "chown -R 65532:65532 /data && echo '✅ Sequencer data permissions fixed'"]
    networks:
      - andechain-p2p

  # ============================================
  # 3. ANDE Chain Sequencer (ev-reth with Token Dualidad)
  # ============================================
  ev-reth-sequencer:
    container_name: ev-reth-sequencer
    image: ev-reth-andechain:production
    restart: unless-stopped
    depends_on:
      sequencer-init:
        condition: service_completed_successfully
      jwt-init-sequencer:
        condition: service_completed_successfully
      celestia-light:
        condition: service_healthy
    ports:
      - "8545:8545"   # HTTP RPC
      - "8546:8546"   # WebSocket
      - "8551:8551"   # Engine API
      - "9001:9001"   # Metrics
      - "30303:30303" # P2P
    volumes:
      - ./infra/stacks/single-sequencer/genesis.json:/genesis.json:ro
      - jwttoken-sequencer:/jwt:ro
      - sequencer-data:/data
    environment:
      - RUST_LOG=info,ev_reth=debug,ande_precompile=trace
      - RUST_BACKTRACE=1
    command:
      - node
      - --datadir=/data
      - --chain=/genesis.json
      - --http
      - --http.addr=0.0.0.0
      - --http.port=8545
      - --http.api=admin,eth,net,web3,txpool,debug,trace
      - --http.corsdomain=*
      - --ws
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.api=eth,net,web3,txpool
      - --ws.origins=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --authrpc.jwtsecret=/jwt/jwt.hex
      - --port=30303
      - --max-outbound-peers=25
      - --max-inbound-peers=25
      - --disable-discovery
      - --metrics=0.0.0.0:9001
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "-d", "{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - andechain-p2p
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=ev-reth"

  # ============================================
  # 4. Evolve Sequencer (Consensus Layer)
  # ============================================
  evolve-sequencer:
    container_name: evolve-sequencer
    image: ghcr.io/evstack/ev-node-evm-single:main
    restart: unless-stopped
    depends_on:
      ev-reth-sequencer:
        condition: service_started
      celestia-light:
        condition: service_healthy
      jwt-init-sequencer:
        condition: service_completed_successfully
    ports:
      - "7331:7331"    # RPC
      - "7676:7676"    # P2P
      - "26660:26660"  # Metrics
    volumes:
      - jwttoken-sequencer:/jwt:ro
      - evolve-data:/root/.evolve
      - ./infra/stacks/single-sequencer/genesis.json:/genesis.json:ro
    environment:
      - EVM_ENGINE_URL=http://ev-reth-sequencer:8551
      - EVM_ETH_URL=http://ev-reth-sequencer:8545
      - EVM_JWT_PATH=/jwt/jwt.hex
      - EVM_BLOCK_TIME=2s
      - DA_BLOCK_TIME=30s
      - DA_ADDRESS=http://celestia-light:26658
      - DA_NAMESPACE=000000000000000000000000000000000000616e6465636861696e2d7631
      - DA_START_HEIGHT=8624000
      - CHAIN_ID=6174
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        set -e
        echo "🚀 Initializing ANDE Chain Sequencer..."

        # Wait for ev-reth to be ready
        until curl -sf -X POST -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
          http://ev-reth-sequencer:8545 > /dev/null; do
          echo "⏳ Waiting for ev-reth RPC..."
          sleep 5
        done

        # Get genesis hash
        GENESIS_HASH=$$(curl -s -X POST -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x0",false],"id":1}' \
          http://ev-reth-sequencer:8545 | grep -o '"hash":"0x[^"]*"' | cut -d'"' -f4)

        echo "✅ Genesis Hash: $$GENESIS_HASH"

        # Read JWT secret
        JWT_SECRET=$$(cat /jwt/jwt.hex)

        # Initialize if needed
        if [ ! -f /root/.evolve/config/signer.json ]; then
          echo "📝 Initializing Evolve node..."
          # Create passphrase file
          echo "andechain-sequencer-production-2025" > /tmp/passphrase.txt
          evm-single init \
            --home=/root/.evolve \
            --chain_id=ande-chain-6174 \
            --evnode.node.aggregator=true \
            --evnode.da.namespace=$$DA_NAMESPACE \
            --evnode.da.address=$$DA_ADDRESS \
            --evnode.signer.passphrase_file=/tmp/passphrase.txt
          rm /tmp/passphrase.txt
        else
          echo "ℹ️  Evolve already initialized, skipping init..."
        fi

        # Start sequencer
        echo "🚀 Starting ANDE Chain Sequencer..."
        # Create passphrase file for start
        echo "andechain-sequencer-production-2025" > /tmp/passphrase-start.txt
        exec evm-single start \
          --home=/root/.evolve \
          --evm.eth-url=$$EVM_ETH_URL \
          --evm.engine-url=$$EVM_ENGINE_URL \
          --evm.jwt-secret-file=/jwt/jwt.hex \
          --evm.genesis-hash=$$GENESIS_HASH \
          --evnode.node.aggregator=true \
          --evnode.node.block_time=$$EVM_BLOCK_TIME \
          --evnode.da.address=$$DA_ADDRESS \
          --evnode.da.namespace=$$DA_NAMESPACE \
          --evnode.signer.passphrase_file=/tmp/passphrase-start.txt \
          --evnode.p2p.listen_address=/ip4/0.0.0.0/tcp/7676 \
          --evnode.rpc.address=0.0.0.0:7331 \
          --evnode.instrumentation.prometheus=true \
          --evnode.instrumentation.prometheus_listen_addr=:26660
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7331/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - andechain-p2p
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=evolve-sequencer"

  # ============================================
  # 5. Prometheus Monitoring
  # ============================================
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/stacks/single-sequencer/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - andechain-p2p

  # ============================================
  # 6. Grafana Dashboard
  # ============================================
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=andechain-admin-2025
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_ANALYTICS_REPORTING_ENABLED=false
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - andechain-p2p
    depends_on:
      - loki

  # ============================================
  # 7. Loki - Logs Centralizados
  # ============================================
  loki:
    container_name: loki
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    environment:
      - LOKI_CONFIG=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - andechain-p2p
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ============================================
  # 8. Nginx - Reverse Proxy para Testnet Pública
  # ============================================
  nginx:
    container_name: nginx-proxy
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/stacks/single-sequencer/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ev-reth-sequencer
      - evolve-sequencer
      - prometheus
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - andechain-p2p
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=nginx"

  # ============================================
  # 9. cAdvisor - Monitoreo de Recursos
  # ============================================
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - andechain-p2p
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"